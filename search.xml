<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java语法补漏</title>
    <url>/2021/05/11/Java%E8%AF%AD%E6%B3%95%E8%A1%A5%E6%BC%8F/</url>
    <content><![CDATA[<h1 id="Java基础语法学习"><a href="#Java基础语法学习" class="headerlink" title="Java基础语法学习"></a>Java基础语法学习</h1><h2 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h2><p>Boolean 类型 初始值为false</p>
<p>int、long、short：0</p>
<p> faloat、double：0.0</p>
<p>除了基本类型 都为null</p>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p> 实例变量：从属于对象    使用时需要实例化</p>
<p>局部变量：在方法内定义</p>
<p>Static：类变量 从属于类 加了static后可以方便调用 不需要实例化</p>
<p>final用来定义常量</p>
<h2 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h2><p>Scanner s &#x3D; new Scanner(System.in)</p>
<p>先进行hasNext与hasNextLine判断是否有输入的数据</p>
<p>然后通	过Scanner类的next()和nextLine()方法获取数据</p>
<p>next()特性：</p>
<p>1.读取到有效字符后才可以结束输入</p>
<p>2.有效字符前空白会去掉</p>
<p>3.有效字符后面的空白会作为分隔符或者结束符</p>
<p>4.不能得到带有空格的字符串</p>
<p> nextLine()特性：</p>
<p>1.Enter为结束符  </p>
<p>2.可以获得空白</p>
<p>用完写 s.close</p>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>名称相同</p>
<p>参数列表不同（个数不同，或类型不同，参数排列顺序不同等）</p>
<p>返回值类型可相同可不相同</p>
<p>仅仅返回值不同不可以使用方法重载</p>
<h2 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h2><p>在指定参数类型后加：…（例如double… number）</p>
<p>即可获得可变参数</p>
<p>使用：</p>
<p>number[0]</p>
<p>number[1]</p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>abstract 抽象方法 只有方法名字，没用方法的实现</p>
<p>extends：单继承 （接口可以多继承）</p>
<p>抽象类不能new  只能靠子类来实现它：约束</p>
<p>抽象类可以写普通方法</p>
<p>抽象方法必须在抽象类中</p>
<p>抽象的抽象：约束</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>只有规范 无法写方法，专业的约束！约束和实现分离：面向接口编程</p>
<p>接口的 本质是契约</p>
<p>抽象的精髓，是对对象的抽象，最能体现这一点的 就是接口，设计模式所研究的就是如何合理的去抽象</p>
<p>拥有抽象的思维 -java 架构师</p>
<p>方法 接口中的所有定义其实都是抽象的 public abstract</p>
<p>常量 定义的常量都是public static final</p>
<p>定义一些方法 让不同的人去实现</p>
<p>接口中可以定义默认方法 ：使用default关键字</p>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注解可以显示赋值，如果没有默认值，我们就必须给注解赋值</span></span><br><span class="line"><span class="meta">@MyAnnotation2(age=18,name=&quot;秦疆&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation3</span>（<span class="string">&quot;秦疆&quot;</span>）</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>（&#123;ElementType.TYPE，ElementType.METHOD&#125;）	</span><br><span class="line"><span class="meta">@Retention</span>（RetentionPolicy.RUNTIME）</span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line"><span class="comment">//注解的参数:参数类型+参数名();</span></span><br><span class="line">String name（）<span class="keyword">default</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">int</span> age（）;</span><br><span class="line"><span class="type">int</span> id（）<span class="keyword">default</span> -<span class="number">1</span>；</span><br><span class="line"><span class="comment">//如果默认值为-1，代表不存在。</span></span><br><span class="line">string[]schools（）<span class="keyword">default</span>&#123;<span class="string">&quot;西部开源&quot;</span>，<span class="string">&quot;清华大学&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3&#123;</span><br><span class="line">string <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2021/07/12/Spring/</url>
    <content><![CDATA[<h3 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.3.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>Spring是一个轻量级的 控制反转（IOC）和面向切面编程（AOP）的框架（容器）</li>
<li>轻量级、非入侵式的框架</li>
<li>控制反转（IOC），面向切面编程（AOP）</li>
<li>支持事务的处理，对框架整合的支持</li>
</ul>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p><img src="/.com//.%5CSpring%5Cimage-20210713193051068.png" alt="image-20210713193051068"></p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><img src="/.com//images%5Cimage-20210713193253523.png" alt="image-20210713193253523"></p>
<ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速的开发单个微服务</li>
<li>约定大于配置</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>基于SpringBoot</li>
</ul>
</li>
</ul>
<p>因为现在大多数公司都在使用SpringBoot进行开发 需要提前掌握Spring与SpringMVC！承上启下</p>
<h2 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h2><p>1.UserDao接口<br>2.UserDaolmpl实现类<br>3.UserService业务接口<br>4.UserServicelmpl业务实现类</p>
<p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！</p>
<p>我们使用一个Set接口实现.已经发生了革命性的变化！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Userpao userDao；</span><br><span class="line"><span class="comment">//利用set进行动态实现值的注入！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setUserDao（UserDao userDao）&#123;</span><br><span class="line"><span class="built_in">this</span>.userDao=userDao；</span><br></pre></td></tr></table></figure>

<ul>
<li>之前，程序是主动创建对象！控制权在程序猿手上！</li>
<li>使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象！</li>
</ul>
<p>这种思想，从本质上解决了问题，我们程序猿不用再去管理对象的创建了。系统的耦合性大大降低~，可以更加专注的在业务的实现上！这是IOC的原型！</p>
<h2 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h2><p>1.使用无参构造创建对象，默认！<br>2.假设我们要使用有参构造创建对象。<br>1.下标赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;！--第一种，下标赋值！--&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span><span class="attr">value</span>=<span class="string">&quot;狂神说Java&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;！--第二种方式：通过类型创建，不建议使用！--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.user&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.string&quot;</span><span class="attr">value</span>=<span class="string">&quot;qinjiang&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;！--别名，如果添加了别名，我们也可以使用别名获取到这个对象--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span><span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.Bean的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;！--</span><br><span class="line">id:bean的唯一标识符，也就是相当于我们学的对象名</span><br><span class="line">class:bean对象所对应的全限定名：包名+类型</span><br><span class="line">name：也是别名，而且name可以同时取多个别名</span><br><span class="line">--&gt;</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.userT&quot;</span><span class="attr">name</span>=<span class="string">&quot;user2 u2，u3；u4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span><span class="attr">value</span>=<span class="string">&quot;西部开源&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.import这个import，一般用于团队开发使用，他可以将多个配置文件，导入合并为一个假设，现在项目中有多个人开发，这三个人复制不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人的xml合并为一个总的，使用的时候使用总的配置。</p>
<h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span>` `class` `FooController &#123;</span><br><span class="line"> </span><br><span class="line"> ``<span class="keyword">private</span>` `<span class="keyword">final</span> FooService fooService;</span><br><span class="line"> </span><br><span class="line"> ``<span class="meta">@Autowired</span></span><br><span class="line"> ``<span class="keyword">public</span>` `FooController(FooService fooService) &#123;</span><br><span class="line">   ``<span class="built_in">this</span>``.fooService = fooService;</span><br><span class="line"> ``&#125;</span><br><span class="line"> </span><br><span class="line"> ``<span class="comment">//使用方式上同，略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Set方式注入"><a href="#Set方式注入" class="headerlink" title="Set方式注入"></a>Set方式注入</h3><ul>
<li>依赖注入：Set注入！<ul>
<li>依赖：bean对象的创建依赖于容器！</li>
<li>注入：bean对象中的所有属性，由容器来注入</li>
</ul>
</li>
</ul>
<p>[环境搭建]</p>
<p>1.复杂类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line"><span class="keyword">private</span> string address; <span class="keyword">public</span> string getAddress)&#123;</span><br><span class="line"><span class="keyword">return</span> address; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(string address)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>. address=address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.真实测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> string name;</span><br><span class="line"><span class="keyword">private</span> Address address;</span><br><span class="line"><span class="keyword">private</span> string[] books; </span><br><span class="line"><span class="keyword">private</span> List&lt;string&gt; hobbys;</span><br><span class="line"><span class="keyword">private</span> Map&lt;string,string&gt;card; </span><br><span class="line"><span class="keyword">private</span> Set&lt;string&gt; games; </span><br><span class="line"><span class="keyword">private</span> string wife; </span><br><span class="line"><span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;？xml version=&quot;1.0&quot;encoding=&quot;UTF-8&quot;？&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.student&quot;</span>&gt;</span></span><br><span class="line">&lt;！--第一种，普通值注入，value--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span><span class="attr">value</span>=<span class="string">&quot;秦疆&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(string[] args)</span>&#123;</span><br><span class="line">Applicationcontext context=<span class="keyword">new</span> <span class="title class_">classPathxmlApplicationcontext</span>(<span class="string">&quot;beans. xml&quot;</span>);</span><br><span class="line">    student student=(student) context. getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">    system. out. println(student. getAddress());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拓展方式注入"><a href="#拓展方式注入" class="headerlink" title="拓展方式注入"></a>拓展方式注入</h3><p>c构造和p构造要导入约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;？xml version=&quot;1.0&quot;encoding=&quot;UTF-8&quot;？&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttps://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">&lt;！--p命名空间注入，可以直接注入属性的值：property--&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot;class=&quot;com.kuang.pojo.user&quot;p:name=&quot;秦疆&quot;p:age=&quot;18&quot;/&gt;</span><br><span class="line">&lt;！--c命名空间注入，通过构造器注入：construct-args--&gt;</span><br><span class="line">&lt;bean id=&quot;user2&quot;class=&quot;com.kuang.pojo.User&quot;c:age=&quot;18&quot;c:name=&quot;狂神&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p><img src="/images/5.png"></p>
<p>1.单例模式（Spring默认）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span><span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span><span class="attr">c:name</span>=<span class="string">&quot;狂神&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.原型模式：每次从容器中get1的时候，都会产生一个新对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;accountservice&quot;</span>class=<span class="string">&quot;com.something.pefaultAccountservice&quot;</span></span><br><span class="line">scope=<span class="string">&quot;prototype&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>3.其他requset，session，application只能在web开发中用到</p>
<h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><ul>
<li>自动装配是Spring满足bean依赖一种方式！</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性！</li>
</ul>
<p>在Spring中有三种装配的方式</p>
<p>1.在xml中显示的配置</p>
<p>2.在java中显示配置</p>
<p>3.隐式的自动装配bean</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>根据名字   所有bean的id唯一   bean要和自动注入的属性set方法的值一致！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">byName：会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid！</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小狂神呀&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据类型   所有bean的class唯一   且这个bean要和自动注入的属性类型一致！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">x <span class="comment">&lt;!--byName：会自动在容器上下文中查找，和自己对象属性配型相同的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小狂神呀&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>1.导入约束</p>
<p>context约束</p>
<p>2.配置注解的支持</p>
<p><a href="context:annotation-config/">context:annotation-config/</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <strong>@Autowired</strong> </p>
<p>直接在属性上使用即可！也可以在set方式上使用！</p>
<p>使用Autowired 我们可以不用编写Set方法了，前提是你这个自动装配的属性在IOC（Spring）容器中存在，且符合名字byname！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> 说明这个字段可以为空</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span></span><br><span class="line">&#123;</span><br><span class="line">/∥如果显示定义Autowired的required属性为<span class="literal">false</span>，说明这个对象可以为nu11，否则不允许为空</span><br><span class="line"><span class="meta">@Autowired</span>（required=<span class="literal">false</span>）</span><br><span class="line"><span class="keyword">private</span> cat cat；</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Dog dog；</span><br><span class="line"><span class="keyword">private</span> string name；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候、我们可以使用@Qualifier（value&#x3D;”xxx’”）去配置@Autowired的使用，指定一个唯一的bean对象注入！</p>
<p><strong>@Resource</strong></p>
<p>先通过名字匹配 匹配不到通过class匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line"><span class="meta">@Resource(name =&quot;cat2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> cat cat; </span><br><span class="line"><span class="meta">@Resource</span> </span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：<br>@Resource 和@Autowired的区别：</p>
<ul>
<li>都是用来自动装配的，都可以放在属性字段上</li>
<li>@Autowired通过byType的方式实现，而且必须要求这个对象存在！【常用】</li>
<li>@Resource默认通过byname的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！【常用】</li>
<li>执行顺序不同：Autowired默认通过byType @Resource默认通过byname</li>
</ul>
<p>衍生的注解<br>@Component 有几个衍生注解，我们在web开发中，会按照mvc三层架构分层！</p>
<ul>
<li><p>dao【@Repository】</p>
</li>
<li><p>service【@Service】</p>
</li>
<li><p>controller【@Controller】</p>
</li>
</ul>
<p>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配Bean<br><strong>自动装配置</strong><br>@Autowired：自动装配通过类型。名字<br>如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier（value&#x3D;”xxx”）<br>@Nu1lable字段标记了这个注解，说明这个字段可以为nu11；<br>@Resource：自动装配通过名字。类型。</p>
<p><strong>xml与注解：</strong></p>
<ul>
<li>xml更加万能，适用于任何场合！维护简单方便</li>
<li>注解不是自己类使用不了，维护相对复杂！</li>
</ul>
<p><strong>xml与注解最佳实践：</strong></p>
<ul>
<li>oxml 用来管理bean；。注解只负责完成属性的注入；</li>
<li>我们在使用的过程中，只需要注意一个问题：必须让注解生效，就需要开启注解的支持</li>
</ul>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>SpringAOP的底层—代理模式</p>
<p>代理模式分类：</p>
<ul>
<li><p>静态代理</p>
<p>角色分析：<br>抽象角色：一般会使用接口或者抽象类来解决<br>真实角色：被代理的角色<br>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作<br>客户：访问代理对象的人！</p>
<p>静态代理模式的好处：<br>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务<br>公共也就就交给代理角色！实现了业务分工业务扩展的时候 方便管理</p>
</li>
<li><p>动态代理</p>
<p>动态代理和静态代理角色一样<br>动态代理的代理类是动态生成的，不是我们直接写好的！<br>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<br>基于接口–JDK动态代理【我们在这里使用】<br>基于类：cglib ojava字节码实现： javasist需要了解两个类：Proxy，Invokationl</p>
</li>
</ul>
<p>动态代理的好处：</p>
<ul>
<li><p>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</p>
</li>
<li><p>公共也就就交给代理角色！实现了业务的分工！</p>
</li>
<li><p>公共业务发生扩展的时候，方便集中管理！ </p>
</li>
<li><p>一个动态代理类代理的是一个接口，一般就是对应的一类业务</p>
</li>
<li><p>一个动态代理类可以代理多个类，只要是实现了同一个接口即可！</p>
<p><strong>使用AOP 需要导入一个依赖包：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--https://mvnrepository.com/artifact/org.aspectj/aspectjweaver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 方式一：使用Spring的API接口【主要SpringAPl接口实现】<br>方式二：自定义来实现AOP【主要是切面定义】<br>方式三：使用注解实现！|</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java, Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL</title>
    <url>/2021/05/18/MySQL/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><p><strong>关系型数据库（SQL）</strong></p>
<ul>
<li>MySQL,Oracle,Sql Server,DB2,SQLite</li>
<li>通过表和表之间，行和列之间的关系进行数据的存储</li>
</ul>
<p><strong>非关系型数据库（NoSQL）Not Only</strong></p>
<ul>
<li>Redis，MongDB </li>
<li>非关系型数据库，对象存储，通过对象自身的属性来决定</li>
</ul>
<p><strong>DBMS（数据库管理系统）</strong></p>
<ul>
<li>数据库的管理软件 管理数据库</li>
</ul>
<p>单行注释：–</p>
<p>多行注释：</p>
<p>&#x2F;*</p>
<p>*&#x2F;</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>数值</strong></p>
<ul>
<li>tinyint 十分小的数据	1个字节</li>
<li>smallint 较小的数据    2个字节</li>
<li>mediumint 中等大小的数据    3个字节</li>
<li>int 标准的整数    4个字节常    用的int</li>
<li>bigint 较大的数据    8个字节</li>
<li>float 浮点数    4个字节</li>
<li>double 浮点数    8个字节（精度问题！）</li>
<li>decimal   字符串形式的浮点数金融计算的时候，一般是使用decimal</li>
</ul>
<p><strong>字符串</strong></p>
<ul>
<li>char  字符串固定大小的   0-255</li>
<li>varchar  可变字符串   0~65535   常用的变量   String</li>
<li>tinytext  微型文本   2^8-1</li>
<li>text  文本串  2^16-1   保存大文本</li>
</ul>
<p><strong>时间日期</strong></p>
<p>java.util.Date</p>
<ul>
<li>date   YYYY-MM-DD  日期格式</li>
<li>time  HH:mm:ss   时间格式</li>
<li><strong>datetime  YYYY-MM-DD HH:mm:ss 最常用的时间格式</strong></li>
<li><strong>timestamp  时间戳，1970.1.1到现在的毫秒数！</strong></li>
<li>year 年份表示</li>
</ul>
<p><strong>null</strong></p>
<ul>
<li>没有值，未知</li>
<li>注意，不要使用NULL进行运算，结果为NULL</li>
</ul>
<h2 id="数据库的字段属性（重点）"><a href="#数据库的字段属性（重点）" class="headerlink" title="数据库的字段属性（重点）"></a>数据库的字段属性（重点）</h2><p><strong>Unsigned</strong>：</p>
<ul>
<li>无符号的整数</li>
<li>声明了该列不能声明为负数</li>
</ul>
<p><strong>zerofill</strong>：</p>
<ul>
<li>0填充的</li>
<li>不足的位数，使用0来填充，int（3），5—005</li>
</ul>
<p><strong>自增</strong>：</p>
<ul>
<li>通常理解为自增，自动在上一条记录的基础上+1（默认）</li>
<li>通常用来设计唯一的主键~index，必须是整数类型</li>
<li>可以自定义设计主键自增的起始值和步长</li>
</ul>
<p><strong>非空：NUll not null</strong></p>
<ul>
<li>设置not null 不赋值报错</li>
<li>Null 不填写值 默认null</li>
</ul>
<p><strong>默认</strong></p>
<ul>
<li>设置默认的值</li>
<li>sex，默认为男，如果不指定该列的值，则会有默认的值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>[IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]表名（</span><br><span class="line">	<span class="string">&#x27;字段名&#x27;</span> 列类型[属性] [索引] [注释]，</span><br><span class="line">	<span class="string">&#x27;字段名&#x27;</span> 列类型[属性] [索引] [注释]，</span><br><span class="line">	<span class="string">&#x27;字段名&#x27;</span> 列类型[属性] [索引] [注释]</span><br><span class="line">）[表类型][字符设置][注释]</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE school  <span class="comment">--查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student  <span class="comment">--查看student数据表的定义语句</span></span><br><span class="line"><span class="keyword">DESC</span> student  <span class="comment">--显示表的结构</span></span><br></pre></td></tr></table></figure>



<h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><h3 id="修改、删除表"><a href="#修改、删除表" class="headerlink" title="修改、删除表"></a>修改、删除表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--修改表名ALTER TABLE旧表名RENAME AS新表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher RENAME <span class="keyword">AS</span> teacher1</span><br><span class="line"><span class="comment">--增加表的字段ALTER TABLE 表名 ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">ADD</span> age <span class="type">INT</span>（<span class="number">11</span>）</span><br><span class="line"><span class="comment">--修改表的字段（重命名，修改约束！）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--ALTER TABLE 表名 MODIFY 字段名 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 MODIFY age <span class="type">VARCHAR</span>（<span class="number">11</span>）<span class="comment">--修改约束</span></span><br><span class="line"><span class="comment">--ALTER TABLE 表命 CHANGE 旧名字 新名字 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 CHANGE age agel <span class="type">INT</span>（<span class="number">1</span>）<span class="comment">--字段重名名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--删除表的字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacherl <span class="keyword">DROP</span> agel</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> teacher</span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>字段名使用 &#96;&#96; 包裹</li>
<li>注释 – &#x2F;**&#x2F;</li>
<li>sql关键字大小写不敏感 小写合适</li>
<li>所有的符号全部用英文</li>
</ul>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot及Java8特性</title>
    <url>/2021/07/15/Spring%20Boot%E5%8F%8AJava8%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="BigDecimal四舍五入"><a href="#BigDecimal四舍五入" class="headerlink" title="BigDecimal四舍五入"></a>BigDecimal四舍五入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1</span>),<span class="number">1</span>,BigDecimal.ROUND_HALF_UP)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (String key : results.keySet())&#123;</span><br><span class="line">          <span class="type">ProcurementCountBudgetStatistic</span> <span class="variable">procurementCountBudgetStatistic</span> <span class="operator">=</span> results.get(key);</span><br><span class="line">          <span class="type">BigDecimal</span> <span class="variable">divide</span> <span class="operator">=</span> procurementCountBudgetStatistic.getBudget().divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">10000</span>), <span class="number">1</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">          procurementCountBudgetStatistic.setBudget(divide);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ProjectByTypes projectByTypes : serve1) &#123;</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">Budget</span> <span class="operator">=</span> projectByTypes.getAmount();</span><br><span class="line">    Budget.divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">10000</span>),<span class="number">1</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    projectByTypes.setAmount(Budget.divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">10000</span>),<span class="number">1</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="将list-转为-Map"><a href="#将list-转为-Map" class="headerlink" title="将list 转为 Map"></a>将list 转为 Map</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; userMap1 = userList.stream().collect(Collectors.toMap(User::getId,User::getName))</span><br></pre></td></tr></table></figure>

<p><img src="/.com//images%5C20190627164129336.png" alt="20190627164129336"></p>
<h3 id="Map装载-排序"><a href="#Map装载-排序" class="headerlink" title="Map装载+排序"></a>Map装载+排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SectionCheckAndCheckItemVo</span> <span class="variable">sectionCheck</span> <span class="operator">=</span> sectionCheckDao.getById(sessionCheckId, MapFunctions.plainPojoMapper(SectionCheckAndCheckItemVo.class));</span><br><span class="line">List&lt;SectionCheckOptionResultListVo&gt; resultPojos = sectionCheckOptionResultDao.findPojoBySectionCheckId(sessionCheckId, MapFunctions.plainPojoMapper(SectionCheckOptionResultListVo.class));</span><br><span class="line">List&lt;SectionCheckSubOptionResultVo&gt; subResultPojos = sectionCheckSubOptionResultDao.findPojoBySectionCheckId(sessionCheckId, MapFunctions.plainPojoMapper(SectionCheckSubOptionResultVo.class));</span><br><span class="line">HashMap&lt;Integer, List&lt;SectionCheckSubOptionResultVo&gt;&gt; subOptionResultMap = subResultPojos.stream()</span><br><span class="line">        .collect(</span><br><span class="line">                Collectors.groupingBy(SectionCheckSubOptionResultVo::getSectionCheckOptionResultId,</span><br><span class="line">                        HashMap::<span class="keyword">new</span>,</span><br><span class="line">                        Collectors.collectingAndThen(</span><br><span class="line">                                Collectors.toList(),</span><br><span class="line">                                list -&gt; &#123;</span><br><span class="line">                                    list.sort(Comparator.comparing(SectionCheckSubOptionResultVo::getPointCode));</span><br><span class="line">                                    <span class="keyword">return</span> list;</span><br><span class="line">                                &#125;</span><br><span class="line">                        )</span><br><span class="line">                )</span><br><span class="line">        );</span><br></pre></td></tr></table></figure>

<p>在Map中通过ID（第一项）取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;SectionCheckSubOptionResultVo&gt; resultVos = subOptionResultMap.get(sectionCheckOptionResultVo.getId());</span><br></pre></td></tr></table></figure>

<h3 id="Entity转Vo"><a href="#Entity转Vo" class="headerlink" title="Entity转Vo"></a>Entity转Vo</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;AttachmentVO&gt; collect = list.stream().map(entity -&gt;</span><br><span class="line">&#123;</span><br><span class="line">    AttachmentVO attachmentVO = new AttachmentVO();</span><br><span class="line">    attachmentVO.setId(entity.getId());</span><br><span class="line">    attachmentVO.setName(entity.getName());</span><br><span class="line">    return attachmentVO;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="JavaBean继承父类后"><a href="#JavaBean继承父类后" class="headerlink" title="JavaBean继承父类后"></a>JavaBean继承父类后</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br></pre></td></tr></table></figure>

<p>装载父类</p>
<h2 id="Optional用法"><a href="#Optional用法" class="headerlink" title="Optional用法"></a>Optional用法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whenEmptyValue_thenReturnDefault</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;anna@gmail.com&quot;</span>, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> Optional.ofNullable(user).orElse(user2);</span><br><span class="line">    <span class="comment">//为空使用默认值User2</span></span><br><span class="line">    assertEquals(user2.getEmail(), result.getEmail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test(expected = IllegalArgumentException.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whenThrowException_thenOk</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> Optional.ofNullable(user)</span><br><span class="line">      .orElseThrow( () -&gt; <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>());</span><br><span class="line">&#125;</span><br><span class="line">为空抛出异常</span><br></pre></td></tr></table></figure>

<h2 id="文件上传下载-cn-hutool-core-io包"><a href="#文件上传下载-cn-hutool-core-io包" class="headerlink" title="文件上传下载 cn.hutool.core.io包"></a>文件上传下载 cn.hutool.core.io包</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ApiOperation(value = &quot;上传附件&quot;)</span><br><span class="line">   @PostMapping(&#123;&quot;/upload&quot;&#125;)</span><br><span class="line">   public Result&lt;Boolean&gt; uploadFile(Integer sectiontCheckSubOptionId, MultipartFile uploadFile) &#123;</span><br><span class="line">       // 上传附件接口</span><br><span class="line">       if (null == uploadFile) &#123;</span><br><span class="line">           return Result.error(&quot;文件为空&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       return Result.ok(fileService.updateFile(sectiontCheckSubOptionId, uploadFile));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>存进数据库+写进本地：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateFile</span><span class="params">(Integer sectiontCheckSubOptionId, MultipartFile file)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> buildPath(sectiontCheckSubOptionId.toString());</span><br><span class="line">    <span class="type">String</span> <span class="variable">allPath</span> <span class="operator">=</span> path  + <span class="string">&quot;/&quot;</span> + file.getOriginalFilename();</span><br><span class="line">    FileUtil.mkParentDirs(allPath);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(allPath))&#123;</span><br><span class="line">        IoUtil.copy(file.getInputStream(), outputStream);</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="comment">//存储进数据库</span></span><br><span class="line">            <span class="type">AttachmentEntity</span> <span class="variable">attachmentEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AttachmentEntity</span>();</span><br><span class="line">            attachmentEntity.setName(file.getOriginalFilename());</span><br><span class="line">            attachmentEntity.setUrl(allPath);</span><br><span class="line">            attachmentEntity.setSectiontCheckSubOptionId(sectiontCheckSubOptionId);</span><br><span class="line">            <span class="comment">//添加时间数据</span></span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            attachmentEntity.setUpdateTime(date);</span><br><span class="line">            attachmentDao.save(attachmentEntity);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>创建本地路径</p>
<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@ApiOperation(value = &quot;读取附件&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">            value = &#123;&quot;/downLoadFile&quot;&#125;,</span></span><br><span class="line"><span class="meta">            method = &#123;RequestMethod.GET&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DownloadFile</span><span class="params">(Integer id , HttpServletRequest request, HttpServletResponse response )</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//下载附件接口</span></span><br><span class="line">            fileService.findFile(id,request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>w</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void findFile (Integer id , HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">    AttachmentEntity attachmentEntity = attachmentDao.selectById(id);</span><br><span class="line">    DowloadFileHelper.setResponseFilename(attachmentEntity.getName(), response, request);</span><br><span class="line">    this.returnFileStream(attachmentEntity.getUrl(), response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将本地文件写进数据流</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    private void returnFileStream(String filePath, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">        File file = new File(filePath);</span><br><span class="line">        if (!file.exists()) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;找不到文件: &quot; + filePath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try (BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(file))) &#123;</span><br><span class="line">            try (OutputStream outputStream = response.getOutputStream()) &#123;</span><br><span class="line">                IoUtil.copy(inputStream, outputStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        response.flushBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将FileName添加进头部：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">public class DowloadFileHelper &#123;</span><br><span class="line">    public DowloadFileHelper() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void setResponseFilename(String filename, HttpServletResponse response, HttpServletRequest request) throws UnsupportedEncodingException &#123;</span><br><span class="line">        response.setContentType(&quot;application/force-download&quot;);</span><br><span class="line">        String agent = request.getHeader(&quot;User-Agent&quot;).toUpperCase();</span><br><span class="line">        if (!agent.contains(&quot;MSIE&quot;) &amp;&amp; !agent.contains(&quot;TRIDENT&quot;) &amp;&amp; !agent.contains(&quot;EDGE&quot;)) &#123;</span><br><span class="line">            response.addHeader(&quot;Content-Disposition&quot;, String.format(&quot;attachment;fileName=\&quot;%s\&quot;&quot;, new String(filename.getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1)));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            response.addHeader(&quot;Content-Disposition&quot;, String.format(&quot;attachment;fileName=\&quot;%s\&quot;&quot;, URLEncoder.encode(filename, &quot;utf-8&quot;)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.addHeader(&quot;DownloadFileName&quot;, URLEncoder.encode(filename, &quot;utf-8&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="返回pojo类型数据，方便转换为Vo"><a href="#返回pojo类型数据，方便转换为Vo" class="headerlink" title="返回pojo类型数据，方便转换为Vo"></a>返回pojo类型数据，方便转换为Vo</h2><p>具体方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;POJO&gt; List&lt;POJO&gt; <span class="title function_">findPojoBySectionCheckId</span><span class="params">(Integer sectionCheckId, MapFunction&lt;POJO&gt; function)</span></span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;SectionCheckOptionResultListVo&gt; resultPojos = sectionCheckOptionResultDao.findPojoBySectionCheckId(sessionCheckId, MapFunctions.plainPojoMapper(SectionCheckOptionResultListVo.class));</span><br></pre></td></tr></table></figure>

<h2 id="poi-tl写入docx文件"><a href="#poi-tl写入docx文件" class="headerlink" title="poi-tl写入docx文件"></a>poi-tl写入docx文件</h2><p>在service 写入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commonInspectService.generateNotifyDocument(</span><br><span class="line">        Constants.PibsQssmInspectNotifyDocumentName.INSPECT_NOTIFY_DOCUMENT_NAME,</span><br><span class="line">        Constants.PibsQssmInspectNotifyDocumentName.INSPECT_NOTIFY_FILE_PATH,</span><br><span class="line">        notifyData, request, response);</span><br></pre></td></tr></table></figure>

<p>给出文件名 文件地址 数据 及request response 即可 将一些数据写入docx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void generateNotifyDocument(String fileName, String filePath, InspectNotifyData inspectNotifyData, HttpServletRequest request, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">    DowloadFileHelper.setResponseFilename(fileName, response, request);</span><br><span class="line"></span><br><span class="line">    InputStream resourceAsStream = getClass().getClassLoader().getResourceAsStream(filePath);</span><br><span class="line">    XWPFTemplate template = XWPFTemplate.compile(resourceAsStream).render(inspectNotifyData);</span><br><span class="line">    </span><br><span class="line">    GenerateWordUtil.writeToResponse(response, template);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>建立博客咯</title>
    <url>/2022/05/11/helloworld/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>helloworld</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2021/09/11/vue/</url>
    <content><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><p>Soc：<br>HTML+CSS+JS：视图：给用户看，刷新后台给的数据</p>
<p>网络通信：axios</p>
<p>页面跳转：vue-router</p>
<p>状态管理：vuex </p>
<p>Vue-UI：ICE </p>
<p>虚拟Dom：利用内存；</p>
<p>计算属性–&gt;Vue特特色</p>
<p>集大成者：MVVM+Dom</p>
<p>大前端时代：后端：轻松</p>
<p>裁员：好事</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Java网络编程</title>
    <url>/2021/04/11/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="获取IP地址"><a href="#获取IP地址" class="headerlink" title="获取IP地址"></a>获取IP地址</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询本机地址 </span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">inetaddress</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="comment">//查询本机地址</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">inetaddress</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line"><span class="comment">//获取百度IP地址</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">inetaddress</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>); </span><br></pre></td></tr></table></figure>

<h3 id="建立Socket通信-传输文件"><a href="#建立Socket通信-传输文件" class="headerlink" title="建立Socket通信 传输文件"></a>建立Socket通信 传输文件</h3><h4 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建立一个带端口的链接地址</span></span><br><span class="line"><span class="type">ServiceSocket</span> <span class="variable">serviceSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceSocket</span>(<span class="number">9999</span>);</span><br><span class="line"><span class="comment">//等待客服端连接</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"><span class="comment">//读取客户端的消息</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span>  <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"><span class="comment">//管道流接收</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len = is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">    baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(baos.toString)</span><br><span class="line">baos.close();</span><br><span class="line">is.close(); </span><br><span class="line">socket.close();</span><br><span class="line">serverSocket.close();</span><br></pre></td></tr></table></figure>



<h4 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到ip、端口</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">serverIP</span> <span class="operator">=</span> Inet.getByName(<span class="string">&quot;127.0.0.1&quot;</span>); </span><br><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line"><span class="comment">//创建一个连接</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(serverIP , port);</span><br><span class="line"><span class="comment">//发送消息 IO流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">os.write(<span class="string">&quot;Hello World&quot;</span>.getBytes());</span><br><span class="line">os.close();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>

<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建立一个Socket</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>;</span><br><span class="line"><span class="comment">//建立一个包</span></span><br><span class="line"><span class="type">String</span> <span class="variable">mas</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">localhost</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9090</span>;</span><br><span class="line"><span class="type">DaragramaPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaragramaPacket</span>(msg.getBytes(),<span class="number">0</span>,msg.length(),localhost , port);</span><br><span class="line"><span class="comment">//发送包</span></span><br><span class="line">socket.send(packet);</span><br><span class="line">socket.close;</span><br></pre></td></tr></table></figure>

<h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置端口</span></span><br><span class="line"><span class="type">DaragramaSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9090</span>);</span><br><span class="line"><span class="comment">//接收数据包</span></span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">DaragramaPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaragramaPacket</span>(buffer , <span class="number">0</span> , buffer.length);</span><br><span class="line">socket.receive(packet);</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>

<h3 id="下载网上资源文件"><a href="#下载网上资源文件" class="headerlink" title="下载网上资源文件"></a>下载网上资源文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下载地址</span></span><br><span class="line"></span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到这个资源</span></span><br><span class="line"></span><br><span class="line"><span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlConnection .getInputStream;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">fileOutputStream</span>(<span class="string">&quot;q.jpg&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len=inputStream.read(buffer))!=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>















]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
